#############################################      preprocessing.smk    ##########################################################################################

#               This Snakemake workflow preprocesses paired-end sequencing data by:
#                  1. Generating quality reports for raw reads (.fastq) using FastQC tool.
#                  2. Trimming reads to ensure high-quality data for downstream analysis using Fastp tool.
#                  3. Generating quality reports for trimmed reads to validate preprocessing.
#
#               Input:
#                  - Paired-end sequencing sample data from `samples.yaml` generated by `get_data.smk`.
#
#               Output:
#                 - Quality reports for raw and trimmed reads.
#                 - High-quality trimmed FASTQ files for further analysis.
#
#               Use Case:
#                 This workflow automates the preprocessing of raw sequencing data, ensuring data quality and integrity
#                 before downstream RNA-Seq or dual-RNASeq analyses.


################################################################################################################################################################

import os
import yaml

# Load sample data from the generated YAML file by `get_data.smk`
with open("output/samples.yaml", 'r') as f:
    sample_data = yaml.safe_load(f)

# Extract sample names for workflow operations
samples = sample_data
sample_names = [os.path.basename(sample).split('_')[0] for sample in sample_data.keys()]



# Rule: Generate FastQC report for raw reads
rule raw_read_quality_report:
    
    input:
        r1=lambda wildcards: sample_data[wildcards.sample]["1"],  # Path to raw read forward
        r2=lambda wildcards: sample_data[wildcards.sample]["2"]   # Path to raw read reverse
    
    output:
        html_r1="output/qc/{sample}_1_fastqc.html",  # FastQC HTML report for forward read sample
        html_r2="output/qc/{sample}_2_fastqc.html"   # FastQC HTML report for reverse read sample
    
    log:
        "logs/qc/{sample}_fastqc.log"  # Log file for FastQC
    
    benchmark:
        "output/benchmarks/raw_qc/{sample}.raw_qc.benchmark.txt"    
    
    conda:
        "environments/fastqc.yaml"  # Conda environment for FastQC
    
    shell:
        """
        mkdir -p output/qc &&  
        fastqc {input.r1} {input.r2} \
        --outdir output/qc > {log} 2>&1  
        """


# Rule: Perform trimming on raw reads using Fastp
rule raw_read_trimming:
    
    input:
        r1=lambda wildcards: sample_data[wildcards.sample]["1"],  # Path to raw read forward
        r2=lambda wildcards: sample_data[wildcards.sample]["2"]   # Path to raw read reverse
    
    output:
        trimmed_r1="output/trimmed_data/{sample}_1_trimmed.fastq.gz",  # Trimmed forward read output
        trimmed_r2="output/trimmed_data/{sample}_2_trimmed.fastq.gz"   # Trimmed reverse read output
    
    log:
        "logs/trimming/{sample}_trim.log"  # Log file for Fastp
    
    params:
        qualified_quality_phred= config["fastp"]["qualified_quality_phred"]
        mean_quality= config["fastp"]["cut_mean_quality"],
        length_required= config["fastp"]["min_length_required"]
    
    benchmark:
        "output/benchmarks/trim_data/{sample}.trim.benchmark.txt"

    threads: 8
    
    conda:
        "environments/fastp.yaml"  # Conda environment for Fastp
    
    shell:
        """
        fastp --in1 {input.r1} \
        --in2 {input.r2} \
        --out1 {output.trimmed_r1} \
        --out2 {output.trimmed_r2} \
        --qualified_quality_phred {params.qualified_quality_phred} \
        --cut_mean_quality {params.mean_quality} \
        --length_required {params.length_required} \
        --overrepresentation_analysis \
        --thread {threads} > {log} 2>&1  
        """


# Rule: Generate FastQC report for trimmed reads
rule cleaned_data_fastqc:
    
    input:
        r1="output/trimmed_data/{sample}_1_trimmed.fastq.gz",  # Path to trimmed read forward
        r2="output/trimmed_data/{sample}_2_trimmed.fastq.gz"   # Path to trimmed read reverse
    
    output:
        html_r1="output/qc/trimmed/{sample}_1_fastqc.html",  # FastQC HTML report for trimmed forward read
        html_r2="output/qc/trimmed/{sample}_2_fastqc.html"   # FastQC HTML report for trimmed reverse read
    
    log:
        "logs/qc/trimmed/{sample}.log"  # Log file for FastQC
    
    benchmark:
        "output/benchmarks/trim_data_qc/{sample}.trim_qc.benchmark.txt"
    
    conda:
        "environments/fastqc.yaml"  # Conda environment for FastQC
    
    shell:
        """
        mkdir -p output/qc/trimmed &&  
        fastqc {input.r1} {input.r2} \
        --outdir output/qc/trimmed > {log} 2>&1  
        """
